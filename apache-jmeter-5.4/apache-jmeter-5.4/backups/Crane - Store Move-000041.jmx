<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="caseLoop" elementType="Argument">
            <stringProp name="Argument.name">caseLoop</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="containerLPN" elementType="Argument">
            <stringProp name="Argument.name">containerLPN</stringProp>
            <stringProp name="Argument.value">sm_${__time()}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time" elementType="Argument">
            <stringProp name="Argument.name">time</stringProp>
            <stringProp name="Argument.value">${__time()}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itemsPerPallet" elementType="Argument">
            <stringProp name="Argument.name">itemsPerPallet</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STX" elementType="Argument">
            <stringProp name="Argument.name">STX</stringProp>
            <stringProp name="Argument.value">%02</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ETX" elementType="Argument">
            <stringProp name="Argument.name">ETX</stringProp>
            <stringProp name="Argument.value">%03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clpn" elementType="Argument">
            <stringProp name="Argument.name">clpn</stringProp>
            <stringProp name="Argument.value">LPN${__time()}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cLength" elementType="Argument">
            <stringProp name="Argument.name">cLength</stringProp>
            <stringProp name="Argument.value">180.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cWidth" elementType="Argument">
            <stringProp name="Argument.name">cWidth</stringProp>
            <stringProp name="Argument.value">200.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startTime" elementType="Argument">
            <stringProp name="Argument.name">startTime</stringProp>
            <stringProp name="Argument.value">${__time(MM/dd/yyyy_HH:mm:sszzz)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numThreads" elementType="Argument">
            <stringProp name="Argument.name">numThreads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostServer" elementType="Argument">
            <stringProp name="Argument.name">hostServer</stringProp>
            <stringProp name="Argument.value">10.8.191.191</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostPort_inventory" elementType="Argument">
            <stringProp name="Argument.name">hostPort_inventory</stringProp>
            <stringProp name="Argument.value">8061</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostPort_container" elementType="Argument">
            <stringProp name="Argument.name">hostPort_container</stringProp>
            <stringProp name="Argument.value">8071</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostPort_putaway" elementType="Argument">
            <stringProp name="Argument.name">hostPort_putaway</stringProp>
            <stringProp name="Argument.value">8171</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostPort_crane" elementType="Argument">
            <stringProp name="Argument.name">hostPort_crane</stringProp>
            <stringProp name="Argument.value">8661</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceId" elementType="Argument">
            <stringProp name="Argument.name">deviceId</stringProp>
            <stringProp name="Argument.value">AR01</stringProp>
            <stringProp name="Argument.desc">of Crane</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceIdno" elementType="Argument">
            <stringProp name="Argument.name">deviceIdno</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="level" elementType="Argument">
            <stringProp name="Argument.name">level</stringProp>
            <stringProp name="Argument.value">001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="zone" elementType="Argument">
            <stringProp name="Argument.name">zone</stringProp>
            <stringProp name="Argument.value">P1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Crane-Offline" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort_crane}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/crane/statereset/offline/Crane-${deviceId}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Crane-Online" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort_crane}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/crane/statereset/online/Crane-${deviceId}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Unique Number" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">${__time(,productClass)}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Product Class" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
      &quot;Description&quot;: &quot;Test Product Class&quot;,&#xd;
      &quot;Name&quot;: &quot;${productClass}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort_inventory}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/inventory/productClass</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Product Class" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort_inventory}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/inventory/productClass?size=${__Random(10,200)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">productClass</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;Name&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">notFound</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Item" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
      &quot;ItemId&quot;:&quot;SKUJ${__time()}&quot;,&#xd;
      &quot;IsActive&quot;: true,&#xd;
      &quot;ProductClass&quot;: {&#xd;
        &quot;Name&quot;: &quot;${productClass}&quot;&#xd;
      },&#xd;
      &quot;ItemUom&quot;: [&#xd;
        {&#xd;
          &quot;ConversionFactor&quot;: 0,&#xd;
          &quot;Uom&quot;: &quot;Case&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;PickBreak&quot;: 0,&#xd;
      &quot;ShortDescription&quot;: &quot;Item Creation&quot;,&#xd;
      &quot;Uom&quot;: &quot;Case&quot;&#xd;
    }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort_inventory}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/inventory/item</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Item creation" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">itemId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;ItemId&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">not found</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop : create_Case_Inventory" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${caseLoop}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">caseCount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Container" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;ContainerTypeId&quot;: {&#xd;
        &quot;ContainerTypeId&quot;: &quot;ASRS_PALLET&quot;&#xd;
    },&#xd;
    &quot;LocationAlias&quot;: &quot;SYSTEMRESERVED&quot;,&#xd;
    &quot;MeasuredDimension&quot;: {&#xd;
        &quot;Height&quot;: 170.0,&#xd;
        &quot;Length&quot;: &quot;${cLength}&quot;,&#xd;
        &quot;UOM&quot;: {&#xd;
            &quot;Code&quot;: &quot;mm&quot;&#xd;
        },&#xd;
        &quot;Width&quot;: &quot;${cWidth}&quot;&#xd;
    },&#xd;
    &quot;ContainerHi&quot; : 1,&#xd;
    &quot;ContainerTi&quot; : 2,&#xd;
    &quot;ContainerLpn&quot;: [&#xd;
        {&#xd;
            &quot;Lpn&quot;: &quot;${clpn}${caseCount}&quot;,&#xd;
            &quot;IsPrimaryLpn&quot;: &quot;true&quot;,&#xd;
            &quot;Orientation&quot;: 0&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
            <stringProp name="HTTPSampler.port">${hostPort_container}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/container/container/createContainerWithHeirarchy</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ContainerId Extraction" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ContainerId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ContainerId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Container LPN Extraction" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ctlpn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Lpn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">f = new FileOutputStream(&quot;${containerLPN}&quot;,true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(&quot;${ctlpn}&quot;);
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Inventory" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;ItemId&quot;: {&#xd;
        &quot;ItemId&quot;: &quot;${itemId}&quot;&#xd;
    },&#xd;
    &quot;LotNumber&quot;: &quot;LOT${__time()}&quot;,&#xd;
    &quot;IsAutoReplenished&quot;: false,&#xd;
    &quot;MaxQuantity&quot;: 100.0,&#xd;
    &quot;MinQuantity&quot;: 1.0,&#xd;
    &quot;Quantity&quot;: {&#xd;
        &quot;Qty&quot;: 1.0,&#xd;
        &quot;UOM&quot;: {&#xd;
            &quot;Code&quot;: &quot;Case&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;ContainerLpn&quot;: &quot;${ctlpn}&quot;,&#xd;
&quot;Lpn&quot;:&quot;${ctlpn}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
            <stringProp name="HTTPSampler.port">${hostPort_inventory}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/inventory/inventory/createByContainerOrLocation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="putawayTask" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;ContainerLpn&quot; : &quot;${clpn}${caseCount}&quot;,&#xd;
	&quot;ScannerId&quot; : &quot;880&quot;,&#xd;
	&quot;ContainerDimension&quot; : {&#xd;
		&quot;ContainerLength&quot; : 180.0,&#xd;
		&quot;ContainerWidth&quot; : 200.0&#xd;
	},&#xd;
	&quot;LocationFilter&quot;: {&#xd;
		&quot;Zone&quot; : [&quot;C1&quot;]&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(hostServer)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(hostPort_putaway)}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/putaway/putawayTask/storageAllocation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">250</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">sleep(1000)</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Storage Allocation" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ContainerLpn&quot;: &quot;${ctlpn}&quot;,&#xd;
  &quot;ScannerId&quot;: &quot;300&quot;,&#xd;
  &quot;ContainerDimension&quot;: {&#xd;
    &quot;ContainerLength&quot;: 300.0,&#xd;
    &quot;ContainerWidth&quot;: 300.0&#xd;
  },&#xd;
  &quot;LocationFilter&quot;: {&#xd;
    &quot;Zone&quot;: [&#xd;
      &quot;${zone}&quot;&#xd;
    ],&#xd;
    &quot;Aisle&quot;: [&#xd;
      &quot;${deviceId}&quot;&#xd;
    ],&#xd;
    &quot;Level&quot;: [&#xd;
      &quot;${level}&quot;&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostServer}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort_putaway}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/putaway/putawayTask/storageAllocation</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Pickup - Spur" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===Pick up spur====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;PickUp-${deviceIdno}\&quot;,\&quot;ContainerLpn\&quot;:[\&quot;&quot;+vars.get(&quot;clpn&quot;)+&quot;\&quot;]}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;DEVICE_COMM_EXCHANGE&quot;, &quot;PickUp-${deviceIdno}.containerstatus&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="PUTC/GETC Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="No_FUNC_RUNNING" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===No_FUNC_RUNNING====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+ u +&quot;u00021~43762~0~46~0~0~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GETC_POS_RUNNING" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===GETC_POS_RUNNING====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~113~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CR_GETC_LOC_EMPTY" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===CR_GETC_LOC_EMPTY====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~125~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
            <stringProp name="TestPlan.comments">Disable all the following steps if using this to create an empty fault</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname=" GETC_EXECUTED" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===GETC_EXECUTED====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~121~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PUTC_POS_RUNNING" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===PUTC_POS_RUNNING====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~129~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Occupational fault" enabled="false">
            <stringProp name="TestPlan.comments">Disable PUTC executed if running this fault</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===Occupational fault====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~141~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PUTC_EXECUTED" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===PUTC_EXECUTED====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~137~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="No_FUNC_RUNNING" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===No_FUNC_RUNNING====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${hostServer}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+ u +&quot;u00021~43762~0~46~0~0~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
