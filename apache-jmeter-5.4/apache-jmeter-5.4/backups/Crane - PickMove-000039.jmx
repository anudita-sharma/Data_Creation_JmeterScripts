<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="inventoryQuantity" elementType="Argument">
            <stringProp name="Argument.name">inventoryQuantity</stringProp>
            <stringProp name="Argument.value">1.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxTimeOut" elementType="Argument">
            <stringProp name="Argument.name">maxTimeOut</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="caseLoop" elementType="Argument">
            <stringProp name="Argument.name">caseLoop</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">7216 cases&amp;Inventory</stringProp>
          </elementProp>
          <elementProp name="containerLPN" elementType="Argument">
            <stringProp name="Argument.name">containerLPN</stringProp>
            <stringProp name="Argument.value">cslpn_${__time()}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time" elementType="Argument">
            <stringProp name="Argument.name">time</stringProp>
            <stringProp name="Argument.value">${__time()}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Uom" elementType="Argument">
            <stringProp name="Argument.name">Uom</stringProp>
            <stringProp name="Argument.value">Case</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itemsPerPallet" elementType="Argument">
            <stringProp name="Argument.name">itemsPerPallet</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STX" elementType="Argument">
            <stringProp name="Argument.name">STX</stringProp>
            <stringProp name="Argument.value">%02</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ETX" elementType="Argument">
            <stringProp name="Argument.name">ETX</stringProp>
            <stringProp name="Argument.value">%03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clpn" elementType="Argument">
            <stringProp name="Argument.name">clpn</stringProp>
            <stringProp name="Argument.value">LPN${__time()}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startTime" elementType="Argument">
            <stringProp name="Argument.name">startTime</stringProp>
            <stringProp name="Argument.value">${__time(MM/dd/yyyy_HH:mm:sszzz)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceId" elementType="Argument">
            <stringProp name="Argument.name">deviceId</stringProp>
            <stringProp name="Argument.value">AR01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceIdno" elementType="Argument">
            <stringProp name="Argument.name">deviceIdno</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="aisle" elementType="Argument">
            <stringProp name="Argument.name">aisle</stringProp>
            <stringProp name="Argument.value">AR01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">10.8.191.191</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rmq_port" elementType="Argument">
            <stringProp name="Argument.name">rmq_port</stringProp>
            <stringProp name="Argument.value">5672</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_port" elementType="Argument">
            <stringProp name="Argument.name">db_port</stringProp>
            <stringProp name="Argument.value">5432</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rmq_user" elementType="Argument">
            <stringProp name="Argument.name">rmq_user</stringProp>
            <stringProp name="Argument.value">momentumwes</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rmq_password" elementType="Argument">
            <stringProp name="Argument.name">rmq_password</stringProp>
            <stringProp name="Argument.value">momentumwesrabbitmq@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Port_container" elementType="Argument">
            <stringProp name="Argument.name">Port_container</stringProp>
            <stringProp name="Argument.value">8071</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">8092-MQA</stringProp>
          </elementProp>
          <elementProp name="cLength" elementType="Argument">
            <stringProp name="Argument.name">cLength</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cWidth" elementType="Argument">
            <stringProp name="Argument.name">cWidth</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="device" elementType="Argument">
            <stringProp name="Argument.name">device</stringProp>
            <stringProp name="Argument.value">Crane</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_ip" elementType="Argument">
            <stringProp name="Argument.name">db_ip</stringProp>
            <stringProp name="Argument.value">10.224.94.52</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - ${__P(hostDB)}" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">PostgresDatabase</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${db_ip}:${db_port}/</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Password1</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Data creation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop : createp pick move" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">caseCount</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Case" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;ContainerTypeId&quot;: {&#xd;
    &quot;ContainerTypeId&quot;: &quot;SHUTTLE_iLPN&quot;&#xd;
  },&#xd;
  &quot;LocationAlias&quot;: &quot;SYSTEMRESERVED&quot;,&#xd;
  &quot;ContainerLpn&quot;: [&#xd;
    {&#xd;
      &quot;Lpn&quot;: &quot;${clpn}${caseCount}&quot;,&#xd;
      &quot;IsPrimaryLpn&quot;: &quot;true&quot;,&#xd;
      &quot;Orientation&quot;:0&#xd;
    }&#xd;
  ],&#xd;
  &quot;MeasuredDimension&quot;: {&#xd;
    &quot;Height&quot;: 10,&#xd;
    &quot;Length&quot;: ${cLength},&#xd;
    &quot;UOM&quot;: {&#xd;
      &quot;Code&quot;: &quot;mm&quot;&#xd;
    },&#xd;
    &quot;Width&quot;: ${cWidth}&#xd;
  },&#xd;
  &quot;MeasuredWeight&quot;:10.0,&#xd;
  &quot;ContainerHi&quot;: 1,&#xd;
  &quot;ContainerTi&quot;: 2&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${Port_container}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/container/container/createContainerWithHeirarchy</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">${ip}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${Port_container}</stringProp>
            <stringProp name="HTTPSampler.proxyUser">wes-admin</stringProp>
            <stringProp name="HTTPSampler.proxyPass">wes-admin@2Q</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ContainerId Extraction" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ContainerId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ContainerId&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Container LPN Extraction" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ctlpn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Lpn&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">C:/Users/H391739/Desktop/new.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">ctlpn</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC-Get Empty Location Alias" enabled="false">
            <stringProp name="dataSource">PostgresDatabase</stringProp>
            <stringProp name="query">Select location_id from &quot;location&quot;.loc_location where is_empty is true and is_online is true and lock_reason_code is null and aisle = &apos;${aisle}&apos; and DEPTH=&apos;00&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">locId</stringProp>
            <stringProp name="variableNames">locId</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update location of a container" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;LocationId&quot;:&quot;${locId_1}&quot;}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${Port_container}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/container/container/containerId/${ContainerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">count</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <com.zeroclue.jmeter.protocol.amqp.AMQPPublisher guiclass="com.zeroclue.jmeter.protocol.amqp.gui.AMQPPublisherGui" testclass="com.zeroclue.jmeter.protocol.amqp.AMQPPublisher" testname="createPickMove" enabled="false">
            <stringProp name="AMQPSampler.Exchange">ASRSCLIENT_EXCHANGE</stringProp>
            <boolProp name="AMQPSampler.ExchangeDurable">true</boolProp>
            <boolProp name="AMQPSampler.ExchangeAutoDelete">false</boolProp>
            <boolProp name="AMQPSampler.ExchangeRedeclare">false</boolProp>
            <stringProp name="AMQPSampler.Queue"></stringProp>
            <stringProp name="AMQPSampler.RoutingKey">asrsclient.create_pickmove</stringProp>
            <stringProp name="AMQPSampler.VirtualHost">/</stringProp>
            <stringProp name="AMQPSampler.MessageTTL"></stringProp>
            <stringProp name="AMQPSampler.MessageExpires"></stringProp>
            <stringProp name="AMQPSampler.ExchangeType">direct</stringProp>
            <stringProp name="AMQPSampler.QueueDurable">true</stringProp>
            <stringProp name="AMQPSampler.QueueExclusive">false</stringProp>
            <stringProp name="AMQPSampler.QueueAutoDelete">false</stringProp>
            <boolProp name="AMQPSampler.Redeclare">false</boolProp>
            <stringProp name="AMQPSampler.Timeout">1000</stringProp>
            <stringProp name="AMQPSampler.Iterations">1</stringProp>
            <stringProp name="AMQPSampler.Host">${ip}</stringProp>
            <stringProp name="AMQPSampler.Port">${rmq_port}</stringProp>
            <stringProp name="AMQPSampler.Username">${rmq_user}</stringProp>
            <stringProp name="AMQPSampler.Password">${rmq_password}</stringProp>
            <stringProp name="AMQPSampler.SSL">false</stringProp>
            <boolProp name="AMQPPublisher.Persistent">false</boolProp>
            <boolProp name="AMQPPublisher.UseTx">false</boolProp>
            <stringProp name="AMQPPublisher.MessageRoutingKey">asrsclient.create_pickmove</stringProp>
            <stringProp name="AMQPPublisher.Message">{
 &quot;SourceLocation&quot;: &quot;&quot;,
&quot;SourceLpn&quot;:&quot;${ctlpn}&quot;
}</stringProp>
            <stringProp name="AMQPPublisher.MessageType"></stringProp>
            <stringProp name="AMQPPublisher.ReplyToQueue"></stringProp>
            <stringProp name="AMQPPublisher.CorrelationId"></stringProp>
            <stringProp name="AMQPPublisher.ContentType"></stringProp>
            <stringProp name="AMQPPublisher.MessageId"></stringProp>
            <elementProp name="AMQPPublisher.Headers" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.zeroclue.jmeter.protocol.amqp.AMQPPublisher>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC-Get details from Move_Step" enabled="false">
            <stringProp name="dataSource">PostgresDatabase</stringProp>
            <stringProp name="query">  select move_task_id from asrsmanager.asm_move_task where container_lpn = &apos;${ctlpn}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">moveTaskId</stringProp>
            <stringProp name="variableNames">moveTaskId</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sleep(5000);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <com.zeroclue.jmeter.protocol.amqp.AMQPPublisher guiclass="com.zeroclue.jmeter.protocol.amqp.gui.AMQPPublisherGui" testclass="com.zeroclue.jmeter.protocol.amqp.AMQPPublisher" testname="Reserve Dropoff spur" enabled="false">
            <stringProp name="TestPlan.comments">Disable all other commands (This will create an audit move)</stringProp>
            <stringProp name="AMQPSampler.Exchange">DEVICE_COMM_EXCHANGE</stringProp>
            <boolProp name="AMQPSampler.ExchangeDurable">true</boolProp>
            <boolProp name="AMQPSampler.ExchangeAutoDelete">false</boolProp>
            <boolProp name="AMQPSampler.ExchangeRedeclare">false</boolProp>
            <stringProp name="AMQPSampler.Queue"></stringProp>
            <stringProp name="AMQPSampler.RoutingKey">Dropoff-${aisle}.spurstatus</stringProp>
            <stringProp name="AMQPSampler.VirtualHost">/</stringProp>
            <stringProp name="AMQPSampler.MessageTTL"></stringProp>
            <stringProp name="AMQPSampler.MessageExpires"></stringProp>
            <stringProp name="AMQPSampler.ExchangeType">direct</stringProp>
            <stringProp name="AMQPSampler.QueueDurable">true</stringProp>
            <stringProp name="AMQPSampler.QueueExclusive">false</stringProp>
            <stringProp name="AMQPSampler.QueueAutoDelete">false</stringProp>
            <boolProp name="AMQPSampler.Redeclare">false</boolProp>
            <stringProp name="AMQPSampler.Timeout">1000</stringProp>
            <stringProp name="AMQPSampler.Iterations">1</stringProp>
            <stringProp name="AMQPSampler.Host">${ip}</stringProp>
            <stringProp name="AMQPSampler.Port">${rmq_port}</stringProp>
            <stringProp name="AMQPSampler.Username">${rmq_user}</stringProp>
            <stringProp name="AMQPSampler.Password">${rmq_password}</stringProp>
            <stringProp name="AMQPSampler.SSL">false</stringProp>
            <boolProp name="AMQPPublisher.Persistent">false</boolProp>
            <boolProp name="AMQPPublisher.UseTx">false</boolProp>
            <stringProp name="AMQPPublisher.MessageRoutingKey">Dropoff-${aisle}.spurstatus</stringProp>
            <stringProp name="AMQPPublisher.Message">{
  &quot;DeviceId&quot;: &quot;Dropoff-${aisle}&quot;,
  &quot;SpurStatus&quot;: &quot;RESERVED&quot;,
  &quot;ContainerLpn&quot;: &quot;${ctlpn}&quot;
}</stringProp>
            <stringProp name="AMQPPublisher.MessageType"></stringProp>
            <stringProp name="AMQPPublisher.ReplyToQueue"></stringProp>
            <stringProp name="AMQPPublisher.CorrelationId"></stringProp>
            <stringProp name="AMQPPublisher.ContentType"></stringProp>
            <stringProp name="AMQPPublisher.MessageId"></stringProp>
            <elementProp name="AMQPPublisher.Headers" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.zeroclue.jmeter.protocol.amqp.AMQPPublisher>
          <hashTree/>
          <com.zeroclue.jmeter.protocol.amqp.AMQPPublisher guiclass="com.zeroclue.jmeter.protocol.amqp.gui.AMQPPublisherGui" testclass="com.zeroclue.jmeter.protocol.amqp.AMQPPublisher" testname="Cancel command" enabled="false">
            <stringProp name="TestPlan.comments">Disable all other commands (This will create an audit move)</stringProp>
            <stringProp name="AMQPSampler.Exchange">DEVICE_COMM_EXCHANGE</stringProp>
            <boolProp name="AMQPSampler.ExchangeDurable">true</boolProp>
            <boolProp name="AMQPSampler.ExchangeAutoDelete">false</boolProp>
            <boolProp name="AMQPSampler.ExchangeRedeclare">false</boolProp>
            <stringProp name="AMQPSampler.Queue"></stringProp>
            <stringProp name="AMQPSampler.RoutingKey">Crane-${aisle}.movestepstatus</stringProp>
            <stringProp name="AMQPSampler.VirtualHost">/</stringProp>
            <stringProp name="AMQPSampler.MessageTTL"></stringProp>
            <stringProp name="AMQPSampler.MessageExpires"></stringProp>
            <stringProp name="AMQPSampler.ExchangeType">direct</stringProp>
            <stringProp name="AMQPSampler.QueueDurable">true</stringProp>
            <stringProp name="AMQPSampler.QueueExclusive">false</stringProp>
            <stringProp name="AMQPSampler.QueueAutoDelete">false</stringProp>
            <boolProp name="AMQPSampler.Redeclare">false</boolProp>
            <stringProp name="AMQPSampler.Timeout">1000</stringProp>
            <stringProp name="AMQPSampler.Iterations">1</stringProp>
            <stringProp name="AMQPSampler.Host">${ip}</stringProp>
            <stringProp name="AMQPSampler.Port">${rmq_port}</stringProp>
            <stringProp name="AMQPSampler.Username">${rmq_user}</stringProp>
            <stringProp name="AMQPSampler.Password">${rmq_password}</stringProp>
            <stringProp name="AMQPSampler.SSL">false</stringProp>
            <boolProp name="AMQPPublisher.Persistent">false</boolProp>
            <boolProp name="AMQPPublisher.UseTx">false</boolProp>
            <stringProp name="AMQPPublisher.MessageRoutingKey">Crane-${aisle}.movestepstatus</stringProp>
            <stringProp name="AMQPPublisher.Message">{
  &quot;MoveTaskId&quot;: &quot;${moveTaskId}&quot;,
  &quot;StepNumber&quot;: 1,
  &quot;MoveStepStatus&quot;: &quot;CANCELED&quot;,
  &quot;ReasonCode&quot;: 30
}</stringProp>
            <stringProp name="AMQPPublisher.MessageType"></stringProp>
            <stringProp name="AMQPPublisher.ReplyToQueue"></stringProp>
            <stringProp name="AMQPPublisher.CorrelationId"></stringProp>
            <stringProp name="AMQPPublisher.ContentType"></stringProp>
            <stringProp name="AMQPPublisher.MessageId"></stringProp>
            <elementProp name="AMQPPublisher.Headers" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.zeroclue.jmeter.protocol.amqp.AMQPPublisher>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="PUTC/GETC Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GETC_POS_RUNNING" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===GETC_POS_RUNNING====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${ip}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~113~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname=" GETC_EXECUTED" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===GETC_EXECUTED====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${ip}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~121~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PUTC_POS_RUNNING" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===PUTC_POS_RUNNING====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${ip}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~129~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PUTC_EXECUTED" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===PUTC_EXECUTED====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${ip}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~137~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="NO_FUNNC_RUNNING" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

log.info(&quot;===NO_FUNNC_RUNNING====&quot;);
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;${ip}&quot;);
factory.setUsername(&quot;momentumwes&quot;);
    factory.setPassword(&quot;momentumwesrabbitmq@123&quot;);
    factory.setPort(5672);
   
    
Connection connection = null;
Channel channel = null;
 try{
    connection = factory.newConnection();
    channel = connection.createChannel();
    sleep(1000);
    def u = $/\/$;
 String message = &quot;{\&quot;DeviceId\&quot;:\&quot;crane-LinxServer${deviceIdno}\&quot;,\&quot;Message\&quot;:\&quot;&quot;+u+&quot;u00021~43762~0~46~0~0~True~False~False~False~True~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~False~1~1~1~0~79~1~2~0~1~0~0~0&quot;+u+&quot;u0003\&quot;}&quot;;

  log.info(message);
  
 channel.basicPublish(&quot;SOCKET_PROXY_EXCHANGE&quot;, &quot;crane-LinxServer${deviceIdno}.from-device&quot;, null, message.getBytes());
  }
  catch(Exception e){log.info(&quot;Exception while publishing RMQ event&quot;);}
finally{
    channel.close();
    connection.close();
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
